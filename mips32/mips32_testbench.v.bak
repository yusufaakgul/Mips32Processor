module mips32_testbench ();

/*reg [31:0] instruction_set;

mips32 mips(instruction_set, result);

initial
begin
	$readmemb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/registers.mem", mips.register.registers_array);
	$readmemb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/data.txt", mips.data.data_array);	
	instruction_set = 32'b10000001001001010000000000000100;  
	$writememb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/registers.mem", mips.register.registers_array);
	$writememb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/data.txt", mips.data.data_array);
	end

initial
begin
	$monitor("read_data1 = %32b read_data2 = %32b \n mux_result = %32b \n alu_result = %32b \n memory_result = %32b \n mux_result2= %32b \n write_data = %32b", mips.register.read_data1, mips.register.read_data2, mips.mux.result_mux_32bit, mips.alu.result, mips.data.read_data, mips.muxx.result_mux_32bit, mips.register.write_data);
end*/

	reg [7:0] index;
	reg clk, clk2;
	mips32 my_mips( clk);
	always 
	begin
		#750 clk =~clk;
	end
	
	always 
	begin
		#750 clk2 =~clk2;
	end

	initial
	begin
		clk=1;
		clk2=1;
		$readmemb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/registers.mem", my_mips.register.registers_array);	
		$readmemb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/data.txt", my_mips.data.data_array);	
		$readmemb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/instructions.txt", my_mips.pc_count.instrMem);	
		index =-1;
		my_mips.PC_in<=0;
	
	end
	
	always @(negedge clk2)
	begin
			
		if(index==8)
		begin
			#1500$writememb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/registers.mem", my_mips.register.registers_array);
			#1501$writememb("C:/altera/13.1/justTemplate_restored/simulation/modelsim/data.txt", my_mips.data.data_array);
			$finish;
		end
		else begin 
			$display(" Instruction = %32b \n opcode = %6b \n rs = %5b \n rt = %5b \n Immediate = %16b \n", my_mips.pc_count.instruction, my_mips.inst.opcode, my_mips.inst.rs, my_mips.inst.rt, my_mips.inst.immediate);
			$display("Read data1 = %32b \n Read data2 = %32b \n", my_mips.register.read_data1, my_mips.register.read_data2);
			$display("Sign or zero extend result = %32b \n", my_mips.mux.result_mux_32bit);
			$display("ALU result = %32b \n", my_mips.alu.result);
			$display("Memory read data = %32b \n", my_mips.data.read_data);
			$display("Lui or other instructions mux result = %32b \n", my_mips.muxx.result_mux_32bit);
			$display("Register write data = %32b \n", my_mips.register.write_data);
			$display("reg_write = %1b \n", my_mips.register.reg_write);
			
			

			index <=index +1;
		
			$display("----------------------------------");
		end
	end


endmodule